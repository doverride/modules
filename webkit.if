## <summary>Web content engine library.</summary>

#######################################
## <summary>
##	The role template for WebKit Plugin Process.
## </summary>
## <param name="role_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The role associated with the user domain.
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The type of the user domain.
##	</summary>
## </param>
#
template(`webkitpp_role_template',`
	gen_require(`
		type webkitpp_exec_t, user_tmpfs_t, tmpfs_t;
		type user_tmp_t;
		attribute_role webkitpp_roles;
	')

	########################################
	#
	# Declarations
	#

	## <desc>
	##	<p>
	##	Determine whether the specified
	##	user executes webkit plugin process
	##	with a domain transition.
	##	</p>
	## </desc>
	gen_tunable(webkitpp_$1_domain_transition, false)

	roleattribute $2 webkitpp_roles;

	type $1_webkitpp_t;
	userdom_user_application_domain($1_webkitpp_t, webkitpp_exec_t)
	role $2 types $1_webkitpp_t;

	type $1_webkitpp_tmp_t;
	userdom_user_tmp_file($1_webkitpp_tmp_t)

	type $1_webkitpp_tmpfs_t;
	userdom_user_tmpfs_file($1_webkitpp_tmpfs_t)

	optional_policy(`
		pulseaudio_tmpfs_content($1_webkitpp_tmpfs_t)
	')

	########################################
	#
	# Policy
	#

	allow $1_webkitpp_t self:process { execmem signal };
	allow $1_webkitpp_t self:tcp_socket create_socket_perms;
	allow $1_webkitpp_t self:udp_socket create_socket_perms;
	allow $1_webkitpp_t self:netlink_route_socket r_netlink_socket_perms;

	allow $1_webkitpp_t $1_webkitpp_tmp_t:dir manage_dir_perms;
	allow $1_webkitpp_t $1_webkitpp_tmp_t:file manage_file_perms;
	files_tmp_filetrans($1_webkitpp_t, $1_webkitpp_tmp_t, { file dir })

	allow $1_webkitpp_t $1_webkitpp_tmpfs_t:file manage_file_perms;
	fs_tmpfs_filetrans($1_webkitpp_t, $1_webkitpp_tmpfs_t, file)

	allow $1_webkitpp_t $3:process signull;
	allow $1_webkitpp_t $3:sem rw_sem_perms;
	allow $1_webkitpp_t $3:unix_stream_socket { getopt getattr read write ioctl };

	stream_connect_pattern($1_webkitpp_t, user_tmp_t, user_tmp_t, $3)

	allow $1_webkitpp_t { tmpfs_t user_tmpfs_t }:file { read write };

	kernel_read_system_state($1_webkitpp_t)
	kernel_read_network_state($1_webkitpp_t)
	kernel_read_net_sysctls($1_webkitpp_t)

	corenet_tcp_connect_all_ephemeral_ports($1_webkitpp_t)
	corenet_tcp_connect_flash_port($1_webkitpp_t)

	corecmd_exec_bin($1_webkitpp_t)
	corecmd_exec_shell($1_webkitpp_t)

	dev_read_urand($1_webkitpp_t)
	dev_read_sysfs($1_webkitpp_t)
	dev_read_sound($1_webkitpp_t)
	dev_write_sound($1_webkitpp_t)
	dev_read_video_dev($1_webkitpp_t)
	dev_write_video_dev($1_webkitpp_t)

	domain_read_all_domains_state($1_webkitpp_t)

	fs_getattr_xattr_fs($1_webkitpp_t)
	fs_rw_hugetlbfs_files($1_webkitpp_t)

	term_search_ptys($1_webkitpp_t)

	auth_read_passwd($1_webkitpp_t)

	sysnet_read_config($1_webkitpp_t)

	userdom_read_home_certs($1_webkitpp_t)
	userdom_getattr_user_terminals($1_webkitpp_t)
	userdom_delete_user_tmpfs_files($1_webkitpp_t)

	xserver_user_x_domain_template($1_webkitpp, $1_webkitpp_t, $1_webkitpp_tmpfs_t)

	tunable_policy(`webkitpp_$1_domain_transition',`
		domtrans_pattern($3, webkitpp_exec_t, $1_webkitpp_t)
	',`
		can_exec($3, webkitpp_exec_t)
	')

	optional_policy(`
		alsa_read_rw_config($1_webkitpp_t)
	')

	optional_policy(`
		dbus_session_client($1, $1_webkitpp_t)
	')

	optional_policy(`
		gnome_search_gconf_data_dir($1_webkitpp_t)
		gnome_dontaudit_write_config_files($1_webkitpp_t)
	')

	optional_policy(`
		gtalkplugin_spec_domtrans($1, $1_webkitpp_t)
		gtalkplugin_config_filetrans_gtalkplugin($1_webkitpp_t, dir, "google-googletalkplugin")
		gtalkplugin_manage_config_home_content($1_webkitpp_t)
		gtalkplugin_spec_rw_inherited_stream_socket($1, $1_webkitpp_t)
		gtalkplugin_spec_rw_inherited_tmpfs_files($1, $1_webkitpp_t)
	')

	optional_policy(`
		gen_require(`
			type mozilla_home_t;
		')

		allow $1_webkitpp_t mozilla_home_t:dir manage_dir_perms;
		manage_files_pattern($1_webkitpp_t, mozilla_home_t, mozilla_home_t)
	')

	optional_policy(`
		pulseaudio_run($1_webkitpp_t, $2)
		domain_system_change_exemption($1_webkitpp_t)
	')
')

########################################
## <summary>
##  Sendto specified unix datagram sockets.
## </summary>
## <param name="role_prefix">
##  <summary>
##  The prefix of the user domain (e.g., user
##  is the prefix for user_t).
##  </summary>
## </param>
## <param name="domain">
##  <summary>
##  Domain allowed access.
##  </summary>
## </param>
#
interface(`webkit_spec_dgram_sendto_pp',`
    gen_require(`
        type $1_webkitpp_t;
    ')

	allow $2 $1_webkitpp_t:unix_dgram_socket sendto;
')
